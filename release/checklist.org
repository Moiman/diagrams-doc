* General notes
** Versioning policy

   Diagrams packages generally have version numbers like A.B.C.D.

   + For "core" packages, the A component should match across major
     releases.  I.e. when making a 2.0 release we will bump all A
     components to 2, regardless of what sorts of changes there are to
     each package.  (Some "peripheral" or "supporting" packages, like
     SVGFonts, palette, monoid-extras, etc. just follow their own
     version scheme instead.  There is no specific policy as to what
     counts as a "core" package and what is "peripheral".)

   + The B and C components should follow the PVP
     (http://www.haskell.org/haskellwiki/Package_versioning_policy).
     In short, C can be bumped if there were only additions, and B
     must be bumped if there were any removals or API modifications.
     See the PVP for complete details.

   + The D component is bumped for minor releases (bug fixes, relaxing
     upper bounds, etc.) which do not change the API at all.

* Per-package checklist

  For each package:

  - Has it had any new features, bugfixes, etc. that need to be
    released?
  - Have the features, bugfixes, etc. been added to the CHANGES file?
  - Are all new features etc. properly described in the user manual
    or a tutorial?
  - Does it have any upper bounds that need increasing?
  - Does it have any lower bounds that need increasing?
  - Is the tested-with: field in the .cabal file up-to-date?
  - Is the Haddock documentation up to date?
  - Has the version number been bumped appropriately?
  - Has the LICENSE file been updated with the appropriate copyright
    years and name(s) of any new contributors?

  Checklist version of the above, suitable for pasting into an .org
  file:

  + [ ] CHANGES updated
  + [ ] all CHANGES in user manual or tutorial
  + [ ] upper bounds fixed
  + [ ] lower bounds fixed
  + [ ] update tested-with field
  + [ ] Haddocks up to date
  + [ ] version bump
  + [ ] LICENSE updated

  Topologically sorted list of packages:

  - vector-space-points
  - monoid-extras
  - dual-tree
  - diagrams-core
  - active
  - diagrams-lib
  - SVGFonts
  - palette
  - diagrams-contrib
  - statestack
  - diagrams-cairo
  - diagrams-gtk
  - diagrams-postscript
  - diagrams-svg
  - diagrams
  - diagrams-builder
  - diagrams-haddock

  Other packages that should be checked:

  - diagrams-backend-tests
  - docutils
  - diagrams-doc
  - diagrams-povray
* Checklist for major releases
  + go through per-package checklist
  + user manual / tutorials
    + make sure all examples build
    + make sure documentation is up-to-date
    + make sure all new features are described/mentioned in the manual
    + diagrams-haddock
      + make sure all diagrams-haddock examples build
      + rebuild all diagrams-haddock examples and check them in
  + testing
    + check all travis tests
    + run diagrams-backend-tests
    + copy diagrams-backend-tests output to website
  + update release page on website
  + upload packages
    + list release date in each CHANGES file
    + upload
  + regenerate combined Haddock documentation and commit to website.
    NOTE: this must be done AFTER releasing packages to Hackage!
    There is a script, build-haddocks.sh, in the diagrams-doc root
    which can be used to build combined Haddocks.  See the comments
    for more info and prerequisites.
  + Rebuild and upload new website.
* Checklist for minor releases
